{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport { connectionError } from './helpers';\nimport { optionAlert } from '../components/option-alert/option-alert.component';\n\nvar request = function request(method, url, data) {\n  var cookies = new Cookies();\n  var token = cookies.get('authToken');\n  axios({\n    method: method,\n    url: url,\n    data: data,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-token': token ? token : ''\n    }\n  }).then(function (_ref) {\n    var data = _ref.data;\n\n    if (data && data.error != null) {\n      var _data$error = data.error,\n          title = _data$error.title,\n          message = _data$error.message;\n      optionAlert({\n        title: title,\n        message: message\n      });\n    }\n\n    return data;\n  }).catch(function () {\n    return connectionError();\n  });\n}; // export default ({\n// \tendPoint = '',\n// \tmethod = 'GET',\n// \tbody,\n// \ttimeout = 20000\n// }) => {\n//     // ${process.env.REACT_APP_SERVER_URL}\n//     const cookies = new Cookies();\n//     const token = cookies.get('authToken')\n//     return Promise.race([fetch(`localhost:3000${endPoint}`, {\n// \t\tmethod,\n// \t\theaders: {\n//             'Content-Type': 'application/json',\n//             'x-access-token': token ? token : ''\n//         },\n// \t\tbody: body ? JSON.stringify(body) : undefined\n// \t}),\n//         new Promise((_, reject) =>\n//             setTimeout(() => reject(new Error('timeout')), timeout)\n//         )\n//     ])\n//     \t.then(res => res.json())\n//     \t.then(data => {\n//             if (data && data.error != null) {\n//                 const { title, message } = data.error;\n//                 optionAlert({\n//                     title,\n//                     message\n//                 })\n//             }\n//     \t\treturn data\n//     \t})\n//     \t.catch(() => connectionError())\t\t\n// }","map":{"version":3,"sources":["/Users/brianmacpherson/Desktop/cantotalkweb/client/src/helpers/apiRequest.js"],"names":["axios","Cookies","connectionError","optionAlert","request","method","url","data","cookies","token","get","headers","then","error","title","message","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,WAAT,QAA4B,mDAA5B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAuB;AACnC,MAAMC,OAAO,GAAG,IAAIP,OAAJ,EAAhB;AACA,MAAMQ,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,WAAZ,CAAd;AACAV,EAAAA,KAAK,CAAC;AACFK,IAAAA,MAAM,EAANA,MADE;AAEFC,IAAAA,GAAG,EAAHA,GAFE;AAGFC,IAAAA,IAAI,EAAJA,IAHE;AAIFI,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,wBAAkBF,KAAK,GAAGA,KAAH,GAAW;AAF7B;AAJP,GAAD,CAAL,CAQGG,IARH,CAQQ,gBAAc;AAAA,QAAXL,IAAW,QAAXA,IAAW;;AAClB,QAAIA,IAAI,IAAIA,IAAI,CAACM,KAAL,IAAc,IAA1B,EAAgC;AAAA,wBACDN,IAAI,CAACM,KADJ;AAAA,UACpBC,KADoB,eACpBA,KADoB;AAAA,UACbC,OADa,eACbA,OADa;AAE5BZ,MAAAA,WAAW,CAAC;AACRW,QAAAA,KAAK,EAALA,KADQ;AAERC,QAAAA,OAAO,EAAPA;AAFQ,OAAD,CAAX;AAIH;;AACD,WAAOR,IAAP;AACH,GAjBD,EAiBGS,KAjBH,CAiBS;AAAA,WAAMd,eAAe,EAArB;AAAA,GAjBT;AAkBH,CArBD,C,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport Cookies from 'universal-cookie';\n\nimport { connectionError } from './helpers';\nimport { optionAlert } from '../components/option-alert/option-alert.component';\n\nconst request = (method, url, data) => {\n    const cookies = new Cookies();\n    const token = cookies.get('authToken')\n    axios({\n        method,\n        url,\n        data,\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': token ? token : ''\n        }\n    }).then(({ data }) => {\n        if (data && data.error != null) {\n            const { title, message } = data.error;\n            optionAlert({\n                title,\n                message\n            })\n        }\n        return data\n    }).catch(() => connectionError())   \n}\n\n// export default ({\n// \tendPoint = '',\n// \tmethod = 'GET',\n// \tbody,\n// \ttimeout = 20000\n// }) => {\n//     // ${process.env.REACT_APP_SERVER_URL}\n//     const cookies = new Cookies();\n//     const token = cookies.get('authToken')\n//     return Promise.race([fetch(`localhost:3000${endPoint}`, {\n// \t\tmethod,\n// \t\theaders: {\n//             'Content-Type': 'application/json',\n//             'x-access-token': token ? token : ''\n//         },\n// \t\tbody: body ? JSON.stringify(body) : undefined\n// \t}),\n//         new Promise((_, reject) =>\n//             setTimeout(() => reject(new Error('timeout')), timeout)\n//         )\n//     ])\n//     \t.then(res => res.json())\n//     \t.then(data => {\n//             if (data && data.error != null) {\n//                 const { title, message } = data.error;\n//                 optionAlert({\n//                     title,\n//                     message\n//                 })\n//             }\n//     \t\treturn data\n//     \t})\n//     \t.catch(() => connectionError())\t\t\n// }"]},"metadata":{},"sourceType":"module"}