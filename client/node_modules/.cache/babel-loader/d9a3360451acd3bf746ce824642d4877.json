{"ast":null,"code":"import _classCallCheck from \"/Users/brianmacpherson/Desktop/cantotalkweb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brianmacpherson/Desktop/cantotalkweb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brianmacpherson/Desktop/cantotalkweb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brianmacpherson/Desktop/cantotalkweb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brianmacpherson/Desktop/cantotalkweb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/brianmacpherson/Desktop/cantotalkweb/client/src/components/speaker-button/speaker-button.component.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Icon from '../icon/icon.component';\nimport { setLoading as _setLoading } from '../../redux/loading/loading.actions';\nimport { audioRequest, setupPlayBack } from '../../helpers/audioRequest';\nimport { isIOS } from \"react-device-detect\";\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setLoading: function setLoading(loading) {\n      return dispatch(_setLoading(loading));\n    }\n  };\n};\n\nvar SpeakerButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SpeakerButton, _Component);\n\n  function SpeakerButton(props) {\n    var _this;\n\n    _classCallCheck(this, SpeakerButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpeakerButton).call(this, props));\n\n    _this.loadAudio = function (entryID) {\n      if (isIOS && _this.playButton.current) {\n        _this.playButton.current.removeEventListener('touchstart', _this.unlockAudio, false);\n      }\n\n      if (_this.playButton.current) {\n        var setLoading = _this.props.setLoading;\n        setLoading(true);\n        audioRequest(entryID).then(function (_ref) {\n          var context = _ref.context,\n              arrayBuffer = _ref.arrayBuffer;\n          console.log(context, arrayBuffer);\n          context.decodeAudioData(arrayBuffer, function (decodedAudio) {\n            _this.setState({\n              audioAvailable: true,\n              context: context,\n              decodedAudio: decodedAudio\n            });\n\n            if (isIOS) {\n              _this.playButton.current.addEventListener('touchstart', _this.unlockAudio, false);\n            }\n\n            setLoading(false);\n          }, function () {\n            return _this.noAudio();\n          });\n        }).catch(function () {\n          return _this.noAudio();\n        });\n      }\n    };\n\n    _this.playAudio = function () {\n      if (!isIOS) {\n        _this.unlockAudio();\n      }\n    };\n\n    _this.unlockAudio = function () {\n      var _this$state = _this.state,\n          context = _this$state.context,\n          decodedAudio = _this$state.decodedAudio,\n          audioAvailable = _this$state.audioAvailable;\n\n      if (audioAvailable) {\n        var playSound = setupPlayBack(context, decodedAudio);\n        playSound.start(0);\n      }\n    };\n\n    _this.noAudio = function () {\n      var setLoading = _this.props.setLoading;\n\n      _this.setState({\n        audioAvailable: false\n      });\n\n      setLoading(false);\n    };\n\n    _this.playButton = React.createRef();\n    _this.state = {\n      audioAvailable: false,\n      context: {},\n      decodedAudio: {}\n    };\n    return _this;\n  }\n\n  _createClass(SpeakerButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var entryID = this.props.entryID;\n      this.loadAudio(entryID);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var entryID = this.props.entryID;\n\n      if (prevProps.entryID !== entryID) {\n        this.loadAudio(entryID);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var size = this.props.size;\n      var audioAvailable = this.state.audioAvailable;\n      var active = audioAvailable ? 'entry-btn-active' : 'entry-btn-disabled';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"entry-btn \".concat(active),\n        onClick: this.playAudio,\n        ref: this.playButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"speaker-5\",\n        iconSize: size || '35',\n        color: audioAvailable ? 'cantoDarkBlue' : 'cantoDarkGray',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SpeakerButton;\n}(Component);\n\nexport default connect(null, mapDispatchToProps)(SpeakerButton);","map":{"version":3,"sources":["/Users/brianmacpherson/Desktop/cantotalkweb/client/src/components/speaker-button/speaker-button.component.js"],"names":["React","Component","connect","Icon","setLoading","audioRequest","setupPlayBack","isIOS","mapDispatchToProps","dispatch","loading","SpeakerButton","props","loadAudio","entryID","playButton","current","removeEventListener","unlockAudio","then","context","arrayBuffer","console","log","decodeAudioData","decodedAudio","setState","audioAvailable","addEventListener","noAudio","catch","playAudio","state","playSound","start","createRef","prevProps","size","active"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Icon from '../icon/icon.component';\nimport { setLoading } from '../../redux/loading/loading.actions';\nimport { audioRequest, setupPlayBack } from '../../helpers/audioRequest';\nimport { isIOS } from \"react-device-detect\";\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tsetLoading: (loading) => dispatch(setLoading(loading)),\n\t}\n}\n\nclass SpeakerButton extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.playButton = React.createRef();\n\t\tthis.state = {\n\t\t\taudioAvailable: false,\n\t\t\tcontext: {},\n\t\t\tdecodedAudio: {}\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { entryID } = this.props;\n\t\tthis.loadAudio(entryID)\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { entryID } = this.props;\n\t\tif (prevProps.entryID !== entryID) {\n\t\t\tthis.loadAudio(entryID)\n\t\t}\n\t}\n\n\tloadAudio = (entryID) => {\n\t\tif (isIOS && this.playButton.current) {     \n\t\t\tthis.playButton.current.removeEventListener('touchstart', this.unlockAudio, false)\n\t\t}\n\n\t\tif (this.playButton.current) {\n\t\t\tconst { setLoading} = this.props;\n\t\t\tsetLoading(true)\n\t\t\taudioRequest(entryID)\n\t\t        .then(({context, arrayBuffer}) => {\n\t\t        \tconsole.log(context, arrayBuffer)\n\t        \t\tcontext.decodeAudioData(arrayBuffer, decodedAudio => {\n\t    \t\t\t\tthis.setState({\n\t\t\t            \taudioAvailable: true,\n\t\t\t            \tcontext, \n\t\t\t            \tdecodedAudio\n\t\t\t            })\n\t\t\t            if (isIOS) {\n\t\t\t             \tthis.playButton.current.addEventListener('touchstart', this.unlockAudio, false);\n\t\t\t            }\n\t\t\t            setLoading(false)\n\t\t\t        }, ()=>this.noAudio())\n\t\t        })\n\t\t        .catch(()=>this.noAudio())\n\t\t}\n\t}\n\n\tplayAudio = () => {\n\t\tif (!isIOS) {\n\t\t\tthis.unlockAudio()\n\t\t}\n\t}\n\n\tunlockAudio = () => {\n\t\tconst { context, decodedAudio, audioAvailable } = this.state;\n\t\tif (audioAvailable) {\n\t\t\tconst playSound = setupPlayBack(context, decodedAudio)\n\t        playSound.start(0);\n\t\t}\n\t}\n\n\tnoAudio = () => {\n\t\tconst { setLoading} = this.props;\n\t\tthis.setState({audioAvailable: false})\n\t\tsetLoading(false)\n\t}\n\n\trender() {\n\t\tconst { size } = this.props;\n\t\tconst { audioAvailable } = this.state\n\n\t\tconst active = audioAvailable ? 'entry-btn-active' : 'entry-btn-disabled'\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button \n\t\t\t\t\tclassName={`entry-btn ${active}`}\n\t\t\t\t\tonClick={this.playAudio}\n\t\t\t\t\tref={this.playButton}\n\t\t\t\t>\n\t\t\t\t\t<Icon \n\t\t\t\t\t\ticon='speaker-5' \n\t\t\t\t\t\ticonSize={size || '35'} \n\t\t\t\t\t\tcolor={audioAvailable\n\t\t\t\t\t\t\t? 'cantoDarkBlue'\n\t\t\t\t\t\t\t: 'cantoDarkGray'\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t\n\t\t);\n\t}\n\t\n}\n\nexport default connect(null, mapDispatchToProps)(SpeakerButton);"]},"metadata":{},"sourceType":"module"}