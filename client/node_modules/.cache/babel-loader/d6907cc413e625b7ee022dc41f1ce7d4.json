{"ast":null,"code":"export var setupPlayBack = function setupPlayBack(context, audio) {\n  var playSound = context.createBufferSource();\n  playSound.buffer = audio;\n  playSound.connect(context.destination);\n  return playSound;\n};\nexport var audioRequest = function audioRequest(entryID, playNow) {\n  var AudioContext = window.AudioContext || window.webkitAudioContext;\n  var context = new AudioContext();\n  return Promise.race([fetch(\"\".concat(process.env.REACT_APP_SERVER_URL, \"/stream-audio\"), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      entryID: entryID\n    })\n  }), new Promise(function (_, reject) {\n    return setTimeout(function () {\n      return reject(new Error('timeout'));\n    }, 20000);\n  })]).then(function (data) {\n    if (data.status === 404) {\n      throw new Error();\n    } else {\n      return data.arrayBuffer();\n    }\n  }).then(function (arrayBuffer) {\n    if (playNow) {\n      context.decodeAudioData(arrayBuffer, function (decodedAudio) {\n        var playSound = setupPlayBack(context, decodedAudio);\n        playSound.start(0);\n      }, function () {\n        return new Error();\n      });\n    } else {\n      return {\n        context: context,\n        arrayBuffer: arrayBuffer\n      };\n    }\n  }).catch();\n};","map":{"version":3,"sources":["/Users/brianmacpherson/Desktop/cantotalkweb/src/helpers/audioRequest.js"],"names":["setupPlayBack","context","audio","playSound","createBufferSource","buffer","connect","destination","audioRequest","entryID","playNow","AudioContext","window","webkitAudioContext","Promise","race","fetch","process","env","REACT_APP_SERVER_URL","method","headers","body","JSON","stringify","_","reject","setTimeout","Error","then","data","status","arrayBuffer","decodeAudioData","decodedAudio","start","catch"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,KAAV,EAAoB;AAC7C,MAAMC,SAAS,GAAGF,OAAO,CAACG,kBAAR,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,GAAmBH,KAAnB;AACAC,EAAAA,SAAS,CAACG,OAAV,CAAkBL,OAAO,CAACM,WAA1B;AACA,SAAOJ,SAAP;AACH,CALM;AAOP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAC9C,MAAIC,YAAY,GAAGC,MAAM,CAACD,YAAP,IAAuBC,MAAM,CAACC,kBAAjD;AACA,MAAMZ,OAAO,GAAG,IAAIU,YAAJ,EAAhB;AACA,SAAOG,OAAO,CAACC,IAAR,CAAa,CAACC,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,oBAAhB,oBAAqD;AACjFC,IAAAA,MAAM,EAAE,MADyE;AAEjFC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAFwE;AAGjFC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACf,MAAAA,OAAO,EAAPA;AAAD,KAAf;AAH2E,GAArD,CAAN,EAKhB,IAAIK,OAAJ,CAAY,UAACW,CAAD,EAAIC,MAAJ;AAAA,WACRC,UAAU,CAAC;AAAA,aAAMD,MAAM,CAAC,IAAIE,KAAJ,CAAU,SAAV,CAAD,CAAZ;AAAA,KAAD,EAAqC,KAArC,CADF;AAAA,GAAZ,CALgB,CAAb,EASLC,IATK,CASA,UAAAC,IAAI,EAAI;AACP,QAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrB,YAAM,IAAIH,KAAJ,EAAN;AACH,KAFD,MAEO;AACH,aAAOE,IAAI,CAACE,WAAL,EAAP;AACH;AACJ,GAfE,EAgBFH,IAhBE,CAgBG,UAAAG,WAAW,EAAI;AACjB,QAAItB,OAAJ,EAAa;AACTT,MAAAA,OAAO,CAACgC,eAAR,CAAwBD,WAAxB,EAAqC,UAAAE,YAAY,EAAI;AACjD,YAAM/B,SAAS,GAAGH,aAAa,CAACC,OAAD,EAAUiC,YAAV,CAA/B;AACA/B,QAAAA,SAAS,CAACgC,KAAV,CAAgB,CAAhB;AACH,OAHD,EAGG;AAAA,eAAI,IAAIP,KAAJ,EAAJ;AAAA,OAHH;AAIH,KALD,MAKO;AACH,aAAO;AAAC3B,QAAAA,OAAO,EAAPA,OAAD;AAAU+B,QAAAA,WAAW,EAAXA;AAAV,OAAP;AACH;AACJ,GAzBE,EA0BLI,KA1BK,EAAP;AA2BH,CA9BM","sourcesContent":["export const setupPlayBack = (context, audio) => {\n    const playSound = context.createBufferSource();\n    playSound.buffer = audio;\n    playSound.connect(context.destination);\n    return playSound\n}\n\nexport const audioRequest = (entryID, playNow) => {\n    let AudioContext = window.AudioContext || window.webkitAudioContext;\n    const context = new AudioContext();\n    return Promise.race([fetch(`${process.env.REACT_APP_SERVER_URL}/stream-audio`, {\n\t\tmethod: 'POST',\n\t\theaders: {'Content-Type': 'application/json'},\n\t\tbody: JSON.stringify({entryID})\n\t}),\n        new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('timeout')), 20000)\n        )\n    ])\n    \t.then(data => {\n            if (data.status === 404) {\n                throw new Error()\n            } else {\n                return data.arrayBuffer()\n            }\n        })\n        .then(arrayBuffer => {\n            if (playNow) {\n                context.decodeAudioData(arrayBuffer, decodedAudio => {\n                    const playSound = setupPlayBack(context, decodedAudio)\n                    playSound.start(0);\n                }, ()=>new Error())\n            } else {\n                return {context, arrayBuffer}\n            }\n        })\n    \t.catch()\t\t\n}\n"]},"metadata":{},"sourceType":"module"}